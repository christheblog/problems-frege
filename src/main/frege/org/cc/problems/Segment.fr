module org.cc.problems.Segment where


-- Compute the sum of the maximum sum subarray
-- Complexity : O(n)
longest :: [Int] -> Int
longest segts = maximum cumulated
	where
		-- Compute cumulated sum
		cumulated = fold (\acc \e -> (max 0 (e + (head acc))) : acc) [0] segts


-- [-1,-5,6,-4,-1,8,9,-3] -> 6 - 4 - 1 + 8 + 9 -> 18
-- Example from "Thinking Functionally With Haskell" - page 127
-- [-1,2,-3,5,-2,1,3,-2,-2,-3,6] = 5 - 2 + 1 + 3 = 7
main :: IO ()
main = putStrLn . show $ longest [-1,2,-3,5,-2,1,3,-2,-2,-3,6]
